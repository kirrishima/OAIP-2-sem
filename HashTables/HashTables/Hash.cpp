#include "Hash.h"
#include <iostream>

// Функцыя вылічэння хэша з выкарыстаннем мультыплікатыўнай хэш-функцыі.
int HashFunction(int key, int size, int p, int i) {
	const double A = 0.6180339887499; // Канстанта A для мультыплікатыўнай хэш-функцыі
	double hashValue = key * A; // Вылічэнне прамежкавага значэння хеша
	hashValue -= int(hashValue); // Атрыманне дробавай часткі значэння хеша
	return (p + int(size * hashValue) + i) % size; // Выкарыстанне лінейнай функцыі для ўліку калізіі
}

// Функцыя для вылічэння наступнага значэння хеша.
int Next_hash(int hash, int size, int p)
{
	return (hash + 5 * p + 3 * p * p) % size; // Вылічэнне наступнага значэння хеша з улікам параметру p.
}

// Функцыя для стварэння аб'екта хэш-табліцы.
Object create(int size, int(*getkey)(void*))
{
	return *(new Object(size, getkey)); // Стварэнне і вяртанне новага аб'екта хэш-табліцы.
}

// Канструктар аб'екта хэш-табліцы.
Object::Object(int size, int(*getkey)(void*))
{
	N = 0; // Ініцыялізацыя колькасці элементаў у табліцы.
	this->size = size; // Заданне памеру табліцы.
	this->getKey = getkey; // Усталяванне функцыі для атрымання ключа элемента.
	this->data = new void* [size]; // Вылучэнне памяці пад масіў паказальнікаў на элементы.
	for (int i = 0; i < size; ++i)
		data[i] = NULL; // Ініцыялізацыя ўсіх элементаў масіва як NULL.
}

// Функцыя для ўстаўкі элемента ў хэш-табліцу.
bool Object::insert(void* d)
{
	bool b = false; // Сцяг для абазначэння паспяховай устаўкі.
	if (N != size) // Праверка на перапаўненне табліцы.
	{
		for (int i = 0, t = getKey(d), j = HashFunction(t, size, 0, i); i != size && !b; j = Next_hash(j, size, ++i)) // Цыкл пошуку месца для ўстаўкі.
		{
			if (data[j] == NULL || data[j] == DEL) // Праверка на пустэчу або аддаленасць вочка.
			{
				data[j] = d; // Устаўка элемента.
				N++; // Павелічэнне колькасці элементаў у табліцы.
				b = true; // Пазнака паспяховай устаўкі.
			}
		}
	}
	return b; // Вяртанне выніку ўстаўкі.
}


// Функцыя для пошуку індэкса элемента ў хэш-табліцы.
int Object::searchInd(int key)
{
	int t = -1; // Ініцыялізацыя індэкса элемента.
	bool b = false; // Сцяг для абазначэння паспяховага пошуку.
	if (N != 0) // Праверка наяўнасці элементаў у табліцы.
	{
		for (int i = 0, j = HashFunction(key, size, 0, i); data[j] != NULL && i != size && !b; j = HashFunction(key, size, ++i, i)) // Цыкл пошуку элемента.
		{
			if (data[j] != DEL) // Праверка на аддаленасць ячэйкі.
			{
				if (getKey(data[j]) == key) // Праверка на адпаведнасць ключа элемента.
				{
					t = j; // Захаванне індэкса элемента.
					b = true; // Пазнака паспяховага пошуку.
				}
			}
		}
	}
	return t; // Вяртанне азначніка элемента (ці -1, калі не знойдзены).
}

// Функцыя для пошуку элемента ў хэш-табліцы па ключы.
void* Object::search(int key)
{
	int t = searchInd(key); // Пошук індэкса элемента.
	return (t >= 0) ? (data[t]) : (NULL); // Вяртанне знойдзенага элемента (або NULL, калі не знойдзены).
}

// Функцыя для выдалення элемента з хэш-табліцы па ключы.
void* Object::deleteByKey(int key)
{
	int i = searchInd(key); // Пошук індэкса элемента.
	void* t = data[i]; // Захаванне выдалянага элемента.
	if (t != NULL) // Праверка на наяўнасць элемента для выдалення.
	{
		data[i] = DEL; // Пазнака вочка як выдаленай.
		N--; // Памяншэнне колькасці элементаў у табліцы.
	}
	return t; // Вяртанне выдаленага элемента (або NULL, калі не знойдзены).
}

// Функцыя для выдалення элемента з хэш-табліцы па значэнні.
bool Object::deleteByValue(void* d)
{
	return(deleteByKey(getKey(d)) != NULL); // Выдаленне элемента па ключы, атрыманым з значэння.
}

// Функцыя для сканавання змесціва хэш-табліцы і прымянення да кожнага элемента названай функцыі.
void Object::scan(void(*f)(void*))
{
	for (int i = 0; i < this->size; i++) // Цыкл сканавання ўсіх вочак табліцы.
	{
		std::cout << "Элемент" << i << '\t'; // Выснова нумара ячэйкі.
		if ((this->data)[i] == NULL) // Праверка на пустэчу вочка.
			std::cout << "пуста" << std::endl; // Выснова паведамлення аб пустым вочку.
		else
			if ((this->data)[i] == DEL) // Праверка на аддаленасць ячэйкі.
				std::cout << "выдалены" << std::endl; // Выснова паведамлення аб выдаленым вочку.
			else
				f((this->data)[i]); // Ужыванне функцыі да элемента.
	}
}